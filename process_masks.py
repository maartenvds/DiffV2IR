import os
import argparse
import numpy as np
from PIL import Image


def process_masks_fast(input_path, output_path):

    for mask_root in os.listdir(input_path):
        mask_path = os.path.join(input_path, mask_root)
        mask_files = [os.path.join(mask_path, f) for f in sorted(os.listdir(mask_path)) if f.endswith(".png")]

        # Load the first mask and convert to binary (1 for white, 0 for black)
        combined = np.array(Image.open(mask_files[0]).convert("RGB"))
        combined_binary = (combined[:, :, 0] == 255).astype(np.uint8)

        # Loop through the remaining masks
        for path in mask_files[1:]:
            mask = np.array(Image.open(path).convert("RGB"))
            binary_mask = (mask[:, :, 0] == 255).astype(np.uint8)
            combined_binary = np.logical_or(combined_binary, binary_mask).astype(np.uint8)

        # Convert the binary mask back to (225, 225, 225) and (0, 0, 0)
        final_mask = np.stack([combined_binary * 255]*3, axis=-1).astype(np.uint8)

        # Save the result
        result_image = Image.fromarray(final_mask)
        output_file = os.path.join(output_path, os.path.basename(mask_path) + ".png")
        result_image.save(output_file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser("Combine masks generated by SAM into a single mask using logical OR")
    parser.add_argument("input_folder", help="Input folder, should contain subfolders with mask files: 0.png, 1.png, 2.png, ...")
    parser.add_argument("output_folder", help="Output folder, should be empty")
    args = parser.parse_args()

    process_masks_fast(args.input_folder, args.output_folder)
